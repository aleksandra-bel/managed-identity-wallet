group = "${groupName}"
version = "${applicationVersion}"
sourceCompatibility = JavaVersion.VERSION_17

// alias for Project.getConfigurations()
configurations {
    // add a custom config to avoid applying the dev-tools to a production app
    developmentOnly
    runtimeClasspath.extendsFrom(developmentOnly)

    // adding a configuration 'compileOnly' which extends from annotationProcessor
    compileOnly.extendsFrom(annotaionProcessor)
}

ext {

}

// comes from gradle directly
dependencies {
    // 'implementation', 'testImplementation', 'runtimeOnly', 'compileOnly', 'annotationProcessor' and
    // 'testAnnotationProcessor' configuration come from the java-plugin
    // docs: https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management
    implementation libs.starter.actuator
    implementation libs.starter.validation
    implementation libs.starter.web
    implementation libs.starter.data.jpa
    implementation libs.boot.starter.security
    implementation libs.security.oauth2.resource.server
    implementation libs.security.oauth2.jose
    implementation libs.cloud.starter.openfeign
    implementation libs.openapi.starter.common
    implementation libs.openapi.starter.webmvc.ui
    implementation libs.commons.dao
    implementation libs.liquibase.core
    implementation libs.cx.ssi.lib

    //Added explicitly to mitigate CVE 2022-1471
    implementation libs.snake.yaml

    //Added explicitly to mitigate CVE 2023-24998
    implementation libs.commons.fileupload

    runtimeOnly libs.postgresql
    compileOnly libs.lombok
    // custom 'developmentOnly' config
    // https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/html/using-boot-devtools.html#using-boot-devtools
    developmentOnly libs.boot.devtools
    annotationProcessor libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.test.lombok
    testImplementation libs.boot.starter.test
    testImplementation libs.testcontainers
    testImplementation libs.testcontainers.jupiter
    testImplementation libs.testcontainers.keycloak
    testImplementation libs.testcontainers.postgre
    testImplementation libs.mockito
    testImplementation libs.json
    testImplementation libs.rgxgen

}

// 'dependencyManagement' comes from the 'io.spring.dependency-management' plugin
// docs: https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testContainerVersion}"
    }
}

// 'build' task comes from the 'java' plugin
// docs: https://docs.gradle.org/current/userguide/java_plugin.html
build {
    archivesBaseName = "miw-service"
    version = "latest"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/eclipse/tractusx/managedidentitywallets/dto/*",
                    "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                    "org/eclipse/tractusx/managedidentitywallets/constant/*",
                    "org/eclipse/tractusx/managedidentitywallets/exception/*"
            ])
        }))
    }
}


// 'jacocoTestCoverageVerification' is provided by the 'jacoco' plugin
// docs: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_violation_rules
jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/eclipse/tractusx/managedidentitywallets/dto/*",
                    "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                    "org/eclipse/tractusx/managedidentitywallets/constant/*",
                    "org/eclipse/tractusx/managedidentitywallets/exception/*"
            ])
        }))
    }
}
