plugins {
    // used to download the 'dash.jar' for license checks
    // docs: https://github.com/michel-kraemer/gradle-download-task
    id "de.undercouch.download" version "5.5.0"
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
}


subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: "de.undercouch.download"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'project-report'

    // uses the 'download' plugin
    // docs: https://plugins.gradle.org/plugin/de.undercouch.download
    tasks.register('dashDownload', Download) {
        description = 'Download the Dash License Tool standalone jar'
        group = 'License'
        src 'https://repo.eclipse.org/service/local/artifact/maven/redirect?r=dash-licenses&g=org.eclipse.dash&a=org.eclipse.dash.licenses&v=LATEST'
        dest layout.projectDirectory.file('dash.jar')
        // will not replace an existing file. If you know you need a new version
        // then manually delete the file yourself, or run `dashClean`
        overwrite false
    }

    // This task is primarily used by CIs
    tasks.register('dashClean') {
        description = "Clean all files used by the 'License' group"
        group = 'License'
        logger.lifecycle("Removing 'dash.jar'")
        file('dash.jar').delete()
        logger.lifecycle("Removing 'deps.txt'")
        file('deps.txt').delete()
    }

    // Usage: in the root of the project: `./gradlew -q dashDependencies`
    // The `-q` option is important if you want to use the output in a pipe.
    tasks.register('dashDependencies') { dashDependencies ->
        description = "Output all project dependencies as a flat list and save an intermediate file 'deps.txt'."
        group = 'License'
        dashDependencies.dependsOn('dashDownload')
        doLast {
            def deps = []
            project.configurations.each { conf ->
                // resolving 'archives' or 'default' is deprecated
                if (conf.canBeResolved && conf.getName() != 'archives' && conf.getName() != 'default') {
                    deps.addAll(conf.incoming.resolutionResult.allDependencies
                    // the 'allDependencies' method return a 'DependencyResult'
                    // we're only interested in the 'ResolvedDependencyResult' sub-interface
                    // docs: https://docs.gradle.org/current/javadoc/org/gradle/api/artifacts/result/ResolutionResult.html#allDependencies-groovy.lang.Closure-
                    // docs: https://docs.gradle.org/current/javadoc/org/gradle/api/artifacts/result/DependencyResult.html
                    // docs: https://docs.gradle.org/current/javadoc/org/gradle/api/artifacts/result/ResolvedDependencyResult.html
                            .findAll({ it instanceof ResolvedDependencyResult })
                            .collect { ResolvedDependencyResult dep ->
                                "${dep.selected}"
                            })
                }
            }

            def uniqueSorted = deps.unique().sort()
            uniqueSorted.each { logger.quiet("{}", it) }
            file("deps.txt").write(uniqueSorted.join('\n'))
        }
    }

    tasks.register('dashLicenseCheck', JavaExec) { dashLicenseCheck ->
        description = "Run the Dash License Tool and save the summary in the 'DEPENDENCIES' file"
        group = 'License'
        dashLicenseCheck.dependsOn('dashDownload')
        dashLicenseCheck.dependsOn('dashDependencies')
        doFirst {
            classpath = files('dash.jar')
            // docs: https://eclipse-tractusx.github.io/docs/release/trg-7/trg-7-04
            args('-project', 'automotive.tractusx', '-summary', 'DEPENDENCIES', 'deps.txt')
        }
        doLast {
            logger.lifecycle("Removing 'deps.txt' now.")
            file('deps.txt').delete()
        }
    }

    // this needs to be done, as we're using the org.springframework.boot plugin
    // with native Gradle bom resolution
    // docs: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#managing-dependencies.gradle-bom-support.customizing
    // docs: https://docs.gradle.org/7.6/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'ch.qos.logback') {
                details.useVersion '1.4.12'
            }
            // avoid a license issue
            if (details.requested.name == 'spring-boot-devtools') {
                details.useVersion '3.1.5'
            }
        }
    }

    // 'bootJar' comes from the 'org.springframework.boot' plugin
    // 'bootJar' is a subclass of the 'jar' task type
    // docs: https://docs.gradle.org/current/dsl/org.gradle.jvm.tasks.Jar.html#org.gradle.jvm.tasks.Jar
    bootJar {
        metaInf {
            from 'DEPENDENCIES'
            from 'SECURITY.md'
            from 'NOTICE.md'
            from 'LICENSE'
        }
    }

    // 'test' comes from the 'java' plugin
    // docs: https://docs.gradle.org/current/userguide/java_plugin.html
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    // standard gradle class
    // docs: https://docs.gradle.org/current/dsl/org.gradle.api.reporting.dependencies.HtmlDependencyReportTask.html
    htmlDependencyReport {
        projects = project.allprojects
    }

    // 'jacocoTestReport' is provided by the 'jacoco' plugin
    // docs: https://docs.gradle.org/current/userguide/jacoco_plugin.html
    jacocoTestReport {
        reports {
            xml.enabled true
            xml.outputLocation = file("./build/reports/xml/jacoco.xml")

            csv.enabled false

            html.enabled true
            html.outputLocation = file("./build/reports/html/jacoco")
        }
    }

    // 'jacoco' is provided by the 'jacoco' plugin
    // docs: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    // 'jacoco' is provided by the 'jacoco' plugin
    // docs: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    // disabled for now
                    minimum = 0.00
                }
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
}
